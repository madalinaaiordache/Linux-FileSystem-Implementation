© IORDACHE Madalina Gabriela 323CA
-------------------------------------------------------------------------------
                                TEMA 1 IOCLA
                FileSystem Implementation using simple linkedlist
-------------------------------------------------------------------------------
Implementation of a file system to define how files and directories are 
stored with commands related to FileSystem(touch, mkdir, rm, rmdir, cd, ls, 
pwd, tree, mv).
-------------------------------------------------------------------------------

Mandatory functions implemented:

    1. TOUCH:
- the touch command is a standard command in UNIX/Linux operating system which
is used to create a file without any content.
- in order to create a file with a given name, we check every file in the 
current working directory; if there already exists a file with the given name,
an error message will be displayed("File already exists").
- in case there is no file with the given name, we create it by adding it at
the beginning of file list if there isn't any file in the current directory,
or by adding it at the ending of file list if there are other files in the
directory. In both cases, we create and allocate memory for the new file.

    2. MKDIR:
- the mkdir command is a standard command in UNIX/Linux operating system which
is used to create a directory without any content.
- in order to create a directory with a given name, we check every directory in
the current working directory; if there already exists a directory with the
given name, an error message will be displayed("Directory already exists").
- in case there is no directory with the given name, we create it by adding it
at the beginning of directory list if there isn't any directory in the current
directory, or by adding it at the ending of directory list if there are other
directories in the directory. In both cases, we create and allocate memory for
the new directory.

    3. LS:
- the ls command allows you to view a list of the files and directories in a
given directory.
- to display all the files and directories we traverse both lists of files and
directories at a time and print all elements in them.

    4. RM:
- rm command is used to remove objects such as files from the file system.
- we check for existence of the file to be removed and if there is no file with
the given name, an error message will be displayed("Could not find the file").
- if the file exists we remove it from beginning of the file list or from an
arbitrary position by checking all the files until we find the one to remove
- finally, deallocate memory for the removed file

    5. RMDIR:
- rmdir command is used to remove objects such as directories from the file
system.
- we check for existence of the directory to be removed and if there is no
directory with the given name, an error message will be displayed("Could not
find the directory").
- if the directoryexists we remove it from beginning of the directory list or
from an arbitrary position by checking all the directories until we find the
one to remove
- finally, deallocate memory for the removed directory

    6. CD:
- the cd (change directory) command is used to change the current working
directory.
- implement "cd ..": we move the directory back one directory by pointing
to its parent.
- implement "cd": we store o pointer at the beginning of directory list, go
through the directory list in order to find the directory we want to move to,
searching by its name; if we couldn't find the directory we want to access,
an error message will be displayed("No directories found!").

    7. PWD
- the pwd function stands for ‘Print Working Directory‘ and it prints the
current working directory. It prints the current directory name with the
complete path starting from /home.
- allocate memory for a string containing the path of current directory, then
concatenate the home directory to the path, the parents of dir and the actual
current directory's name including "/" character by using strlen function.
- finally, display the path folowing these operations.
   
    8. TREE
- the tree function is a recursive directory listing function that produces a 
depth-indented listing of files in the current working directory.
- store pointers to the beginning of lists of directories and files, traverse
these lists each one at a time and display the files on levels using the
formula: 4 spaces(” ”) x level + file/directory name. For directories, we call
the tree function recursively in order to print all directories and
subdirectories.

    9. MV
- the mv command (short of move) is used to rename files or directories by
changing their oldname to a newname.
- if the oldname of a directory or a file is nowhere to be found, an error
message will be displayed("File/Director not found"); if the newname of a 
directory or a file already exists, an error message will be displayed("File/
Director already exists").
    Auxiliary functions implemented:
    - get_dir: function to find given directory by name
    - get_file: function to find given file by name
- if a directory shall be renamed, we traverse the directory list, create a 
directory having the newname and remove the directory having the oldname by
calling mkdir and rmdir functions.
- if a file shall be renamed, we traverse the file list, create a file having
the newname and remove the file having the oldname by calling touch and rm
functions.
    
    10. STOP
- exit program
- deallocate memory

Memory management:
    Auxiliary functions implemented:
    - clean_files: deallocate memory for files.
    - clean_memory: recursively deallocate memory for all files and 
    subdirectories in a directory.